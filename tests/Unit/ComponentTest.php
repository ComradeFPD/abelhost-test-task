<?php

namespace Tests\Unit;

use App\Models\Component;
use App\Models\Ingredient;
use App\Models\User;
use Database\Seeders\DatabaseSeeder;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ComponentTest extends TestCase
{
    use DatabaseMigrations, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(DatabaseSeeder::class);
    }

    /**
     * @test Can i create new component
     *
     * @return void
     */
    public function canICreateComponent()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('baker');
        $this->actingAs($user);
        Ingredient::factory()->count(5)->create();
        $component = Component::factory()->make()->toArray();
        $component['ingredients'] = [1, 2, 3];
        $response = $this->post(route('component.store', $component));
        $response->assertStatus(204);
        $this->assertDatabaseHas('components', ['title' => $component['title']]);
    }

    /**
     * @test Can i update existing component
     *
     * @return void
     */
    public function canIUpdateComponent()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('baker');
        $this->actingAs($user);
        Ingredient::factory()->count(5)->create();
        $component = Component::factory()->create()->toArray();
        $component['title'] = 'new super title';
        $component['ingredients'] = [1, 2, 3, 4];
        $response = $this->put(route('component.update', $component['id']), $component);
        $response->assertStatus(204);
        $this->assertDatabaseHas('components', ['title' => $component['title']]);
    }

    /**
     * @test Can i delete existing component
     *
     * @return void
     */
    public function canIDeleteComponent()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('designer');
        $this->actingAs($user);
        $component = Component::factory()->create();
        $response = $this->delete(route('component.destroy', $component->id));
        $response->assertStatus(204);
        $this->assertDatabaseMissing('components', ['id' => $component->id]);
    }

    /**
     * @test Can i view all components
     *
     * @return void
     */
    public function canIViewAllComponents()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('designer');
        $this->actingAs($user);
        Component::factory()->count(10)->create();
        $response = $this->get(route('component.index'));
        $response->assertStatus(200);
        $this->assertNotEmpty($response);
    }

    /**
     * @test Can't create new component without baker role
     *
     * @return void
     */
    public function cantCreateComponentWithoutBakerRole()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('designer');
        $this->actingAs($user);
        $component = Component::factory()->make()->toArray();
        $response = $this->post(route('component.store', $component));
        $response->assertStatus(401);
        $this->assertDatabaseMissing('components', ['title' => $component['title']]);
    }
}
