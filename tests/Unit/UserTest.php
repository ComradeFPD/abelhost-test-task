<?php

namespace Tests\Unit;

use App\Models\User;
use Database\Seeders\DatabaseSeeder;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Models\Role;
use Tests\TestCase;

class UserTest extends TestCase
{
    use DatabaseMigrations, RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(DatabaseSeeder::class);
    }


    /**
     * @test Can i store new user
     *
     * @return void
     */
    public function canIStoreUser()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $newUser = User::factory()->make()->toArray();
        $newUser['role'] = Role::where('name', 'baker')->first()->name;
        $newUser['password'] = Hash::make('test12345');
        $user->assignRole('admin');
        $this->actingAs($user);
        $response = $this->post(route('user.store'), $newUser);
        $response->assertStatus(204);
        $this->assertDatabaseHas('users', ['name' => $newUser['name']]);
    }

    /**
     * @test Can i update user
     *
     * @return void
     */
    public function canIUpdateUser()
    {
        $faker = Factory::create('ru');
        //$this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('admin');
        $anotherUser = User::factory()->make()->toArray();
        $newName = $faker->name;
        $anotherUser['name'] = $newName;
        $anotherUser['password'] = Hash::make($faker->firstName);
            $this->actingAs($user);
        $response = $this->put(route('user.update', $user->id), $anotherUser);
        $response->assertStatus(204);
        $this->assertDatabaseHas('users', ['name' => $newName, 'id' => $user->id]);
    }

    /**
     * @test Can i delete user
     *
     * @return void
     */
    public function canIDeleteUser()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('admin');
        $this->actingAs($user);
        $anotherUser = User::factory()->create();
        $anotherUser->assignRole('baker');
        $response = $this->delete(route('user.destroy', $anotherUser->id));
        $response->assertStatus(204);
        $this->assertDatabaseMissing('users', ['id' => $anotherUser->id]);
    }

    /**
     * @test Can i create user without admin role
     *
     * @return void
     */
    public function canICreateUserWithoutAdminRole()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->assignRole('baker');
        $this->actingAs($user);
        $newUser = User::factory()->make()->toArray();
        $newUser['password'] = Hash::make('test1235');
        $response = $this->post(route('user.store'), $newUser);
        $response->assertStatus(401);
        $this->assertDatabaseMissing('users', ['name' => $newUser['name']]);
    }
}
